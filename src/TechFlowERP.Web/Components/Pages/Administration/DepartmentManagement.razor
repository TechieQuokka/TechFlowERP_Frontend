@page "/administration/departments"
@using TechFlowERP.Models.DTOs.Department
@using TechFlowERP.Models.DTOs.Employee
@using TechFlowERP.Models.Requests.Department
@using TechFlowERP.Web.Services.Interfaces
@inject IDepartmentManagementService DepartmentService
@inject IEmployeeService EmployeeService
@inject IJSRuntime JSRuntime
@attribute [Authorize(Roles = "Admin,Manager")]

<PageTitle>부서 관리</PageTitle>

<div class="container-fluid">
    <!-- 페이지 헤더 -->
    <div class="row mb-4">
        <div class="col">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h1 class="h3 mb-0">부서 관리</h1>
                    <p class="text-muted">조직의 부서를 관리하고 예산을 추적합니다.</p>
                </div>
                <button class="btn btn-primary" @onclick="ShowCreateDepartmentModal">
                    <i class="fas fa-plus me-2"></i>새 부서 추가
                </button>
            </div>
        </div>
    </div>

    <!-- 통계 카드 -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card bg-primary text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h6 class="card-title">전체 부서</h6>
                            <h2 class="mb-0">@_statistics.TotalDepartments</h2>
                        </div>
                        <i class="fas fa-building fa-2x opacity-75"></i>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-success text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h6 class="card-title">부서장 배정률</h6>
                            <h2 class="mb-0">@(_statistics.ManagerAssignmentRate)%</h2>
                        </div>
                        <i class="fas fa-user-tie fa-2x opacity-75"></i>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-info text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h6 class="card-title">총 예산</h6>
                            <h2 class="mb-0">@(_statistics.TotalBudget.ToString("C0"))</h2>
                        </div>
                        <i class="fas fa-dollar-sign fa-2x opacity-75"></i>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-warning text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h6 class="card-title">예산 사용률</h6>
                            <h2 class="mb-0">@(_statistics.OverallBudgetUtilization.ToString("F1"))%</h2>
                        </div>
                        <i class="fas fa-chart-pie fa-2x opacity-75"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- 검색 및 필터 -->
    <div class="card mb-4">
        <div class="card-body">
            <div class="row g-3">
                <div class="col-md-3">
                    <label class="form-label">검색</label>
                    <input type="text" class="form-control" placeholder="부서명으로 검색..."
                           @bind="_searchRequest.SearchTerm" @onkeypress="@(async (e) => { if (e.Key == "Enter") await SearchDepartments(); })" />
                </div>
                <div class="col-md-2">
                    <label class="form-label">부서장</label>
                    <select class="form-select" @bind="_searchRequest.HasManager">
                        <option value="">전체</option>
                        <option value="true">배정됨</option>
                        <option value="false">미배정</option>
                    </select>
                </div>
                <div class="col-md-2">
                    <label class="form-label">최소 예산</label>
                    <input type="number" class="form-control" placeholder="0"
                           @bind="_searchRequest.MinBudget" />
                </div>
                <div class="col-md-2">
                    <label class="form-label">최대 예산</label>
                    <input type="number" class="form-control" placeholder="무제한"
                           @bind="_searchRequest.MaxBudget" />
                </div>
                <div class="col-md-2">
                    <label class="form-label">예산 사용률</label>
                    <select class="form-select" @bind="_searchRequest.MinBudgetUtilization">
                        <option value="">전체</option>
                        <option value="0">0% 이상</option>
                        <option value="50">50% 이상</option>
                        <option value="75">75% 이상</option>
                        <option value="90">90% 이상</option>
                    </select>
                </div>
                <div class="col-md-1">
                    <label class="form-label">&nbsp;</label>
                    <div class="d-flex gap-2">
                        <button class="btn btn-primary" @onclick="SearchDepartments">
                            <i class="fas fa-search"></i>
                        </button>
                        <button class="btn btn-outline-secondary" @onclick="ResetSearch">
                            <i class="fas fa-undo"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- 부서 목록 테이블 -->
    <div class="card">
        <div class="card-header">
            <h5 class="card-title mb-0">부서 목록</h5>
        </div>
        <div class="card-body p-0">
            @if (_isLoading)
            {
                <div class="text-center py-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">로딩 중...</span>
                    </div>
                    <p class="mt-2 text-muted">부서 목록을 불러오는 중입니다...</p>
                </div>
            }
            else if (_departments?.Items?.Any() == true)
            {
                <div class="table-responsive">
                    <table class="table table-hover mb-0">
                        <thead class="table-light">
                            <tr>
                                <th>부서명</th>
                                <th>부서장</th>
                                <th>직원 수</th>
                                <th>예산</th>
                                <th>사용률</th>
                                <th>상태</th>
                                <th>생성일</th>
                                <th class="text-end">작업</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var dept in _departments.Items)
                            {
                                <tr>
                                    <td>
                                        <strong>@dept.Name</strong>
                                    </td>
                                    <td>
                                        @if (string.IsNullOrEmpty(dept.ManagerName))
                                        {
                                            <span class="text-muted">미배정</span>
                                        }
                                        else
                                        {
                                            @dept.ManagerName
                                        }
                                    </td>
                                    <td>
                                        <span class="badge bg-secondary">@@dept.EmployeeCount명</span>
                                    </td>
                                    <td>@dept.BudgetDisplayText</td>
                                    <td>
                                        <div class="d-flex align-items-center">
                                            <div class="progress flex-grow-1 me-2" style="height: 6px;">
                                                <div class="progress-bar @GetProgressBarClass(dept.BudgetUtilization)"
                                                     style="width: @(Math.Min(dept.BudgetUtilization, 100))%"></div>
                                            </div>
                                            <small>@dept.BudgetUtilizationDisplayText</small>
                                        </div>
                                    </td>
                                    <td>
                                        <span class="@dept.StatusBadgeClass">
                                            @dept.StatusText
                                        </span>
                                    </td>
                                    <td>@dept.CreatedAt.ToString("yyyy-MM-dd")</td>
                                    <td class="text-end">
                                        <div class="btn-group btn-group-sm">
                                            <button class="btn btn-outline-primary" @onclick="(() => ViewDepartmentDetail(dept.Id))"
                                                    title="상세보기">
                                                <i class="fas fa-eye"></i>
                                            </button>
                                            <button class="btn btn-outline-warning" @onclick="(() => EditDepartment(dept.Id))"
                                                    title="수정">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            @if (string.IsNullOrEmpty(dept.ManagerName))
                                            {
                                                <button class="btn btn-outline-success" @onclick="(() => AssignManager(dept.Id))"
                                                        title="부서장 할당">
                                                    <i class="fas fa-user-plus"></i>
                                                </button>
                                            }
                                            else
                                            {
                                                <button class="btn btn-outline-info" @onclick="(() => ChangeManager(dept.Id))"
                                                        title="부서장 변경">
                                                    <i class="fas fa-user-edit"></i>
                                                </button>
                                            }
                                            <button class="btn btn-outline-secondary" @onclick="(() => UpdateBudget(dept.Id))"
                                                    title="예산 수정">
                                                <i class="fas fa-dollar-sign"></i>
                                            </button>
                                            @if (dept.EmployeeCount == 0)
                                            {
                                                <button class="btn btn-outline-danger" @onclick="(() => DeleteDepartment(dept.Id))"
                                                        title="삭제">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            }
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <!-- 페이징 -->
                @if (_departments.TotalPages > 1)
                {
                    <div class="d-flex justify-content-between align-items-center p-3">
                        <div class="text-muted">
                            @((_departments.PageNumber - 1) * _departments.PageSize + 1) -
                            @(Math.Min(_departments.PageNumber * _departments.PageSize, _departments.TotalCount)) /
                            @_departments.TotalCount 항목
                        </div>
                        <nav>
                            <ul class="pagination pagination-sm mb-0">
                                <li class="page-item @(_departments.HasPreviousPage ? "" : "disabled")">
                                    <button class="page-link" @onclick="(() => ChangePage(_departments.PageNumber - 1))"
                                            disabled="@(!_departments.HasPreviousPage)">
                                        이전
                                    </button>
                                </li>

                                @for (int i = Math.Max(1, _departments.PageNumber - 2); i <= Math.Min(_departments.TotalPages, _departments.PageNumber + 2); i++)
                                {
                                    var pageNum = i;
                                    <li class="page-item @(_departments.PageNumber == i ? "active" : "")">
                                        <button class="page-link" @onclick="(() => ChangePage(pageNum))">
                                            @i
                                        </button>
                                    </li>
                                }

                                <li class="page-item @(_departments.HasNextPage ? "" : "disabled")">
                                    <button class="page-link" @onclick="(() => ChangePage(_departments.PageNumber + 1))"
                                            disabled="@(!_departments.HasNextPage)">
                                        다음
                                    </button>
                                </li>
                            </ul>
                        </nav>
                    </div>
                }
            }
            else
            {
                <div class="text-center py-5">
                    <i class="fas fa-building fa-3x text-muted mb-3"></i>
                    <h5 class="text-muted">부서가 없습니다</h5>
                    <p class="text-muted">검색 조건을 변경하거나 새 부서를 추가해보세요.</p>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private SearchDepartmentsRequest _searchRequest = new();
    private TechFlowERP.Models.Common.PagedResult<DepartmentListDto>? _departments;
    private DepartmentStatisticsDto _statistics = new();
    private bool _isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        _isLoading = true;
        try
        {
            // 부서 목록과 통계를 병렬로 로드
            var departmentsTask = DepartmentService.GetDepartmentsAsync(_searchRequest);
            var statsTask = DepartmentService.GetDepartmentStatisticsAsync();

            await Task.WhenAll(departmentsTask, statsTask);

            _departments = await departmentsTask;
            _statistics = await statsTask;
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "부서 데이터 로드 실패", ex.Message);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task SearchDepartments()
    {
        _searchRequest.Page = 1; // 검색 시 첫 페이지로
        await LoadData();
    }

    private async Task ResetSearch()
    {
        _searchRequest = new SearchDepartmentsRequest();
        await LoadData();
    }

    private async Task ChangePage(int page)
    {
        if (page < 1 || (_departments != null && page > _departments.TotalPages))
            return;

        _searchRequest.Page = page;
        await LoadData();
    }

    private async Task ShowCreateDepartmentModal()
    {
        // TODO: 부서 생성 모달 표시
        await JSRuntime.InvokeVoidAsync("alert", "부서 생성 기능 구현 예정");
    }

    private async Task ViewDepartmentDetail(Guid departmentId)
    {
        // TODO: 부서 상세 페이지로 이동
        await JSRuntime.InvokeVoidAsync("alert", $"부서 상세: {departmentId}");
    }

    private async Task EditDepartment(Guid departmentId)
    {
        // TODO: 부서 수정 모달 표시
        await JSRuntime.InvokeVoidAsync("alert", $"부서 수정: {departmentId}");
    }

    private async Task AssignManager(Guid departmentId)
    {
        // TODO: 부서장 할당 모달 표시
        await JSRuntime.InvokeVoidAsync("alert", $"부서장 할당: {departmentId}");
    }

    private async Task ChangeManager(Guid departmentId)
    {
        // TODO: 부서장 변경 모달 표시
        await JSRuntime.InvokeVoidAsync("alert", $"부서장 변경: {departmentId}");
    }

    private async Task UpdateBudget(Guid departmentId)
    {
        // TODO: 예산 수정 모달 표시
        await JSRuntime.InvokeVoidAsync("alert", $"예산 수정: {departmentId}");
    }

    private async Task DeleteDepartment(Guid departmentId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "정말로 이 부서를 삭제하시겠습니까?");

        if (confirmed)
        {
            var success = await DepartmentService.DeleteDepartmentAsync(departmentId);

            if (success)
            {
                await JSRuntime.InvokeVoidAsync("alert", "부서가 삭제되었습니다.");
                await LoadData();
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "부서 삭제에 실패했습니다.");
            }
        }
    }

    private string GetProgressBarClass(decimal utilization)
    {
        return utilization switch
        {
            >= 90 => "bg-danger",
            >= 75 => "bg-warning",
            >= 50 => "bg-info",
            _ => "bg-success"
        };
    }
}