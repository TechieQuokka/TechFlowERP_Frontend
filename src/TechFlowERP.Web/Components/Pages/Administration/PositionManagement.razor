@page "/administration/positions"
@using TechFlowERP.Models.DTOs.Position
@using TechFlowERP.Models.Requests.Position
@using TechFlowERP.Models.Responses.Position
@using TechFlowERP.Web.Services.Interfaces
@inject IPositionService PositionService
@inject IJSRuntime JSRuntime
@inject ILogger<PositionManagement> Logger

<PageTitle>직급 관리</PageTitle>

<div class="container-fluid">
    <!-- 헤더 -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h2 class="text-primary mb-1">
                        <i class="fas fa-sitemap me-2"></i>직급 관리
                    </h2>
                    <p class="text-muted mb-0">조직의 직급 체계를 관리하고 급여 범위를 설정할 수 있습니다.</p>
                </div>
                <button type="button" class="btn btn-primary" @onclick="() => OpenPositionModal()">
                    <i class="fas fa-plus me-2"></i>직급 추가
                </button>
            </div>
        </div>
    </div>

    <!-- 통계 카드 -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card bg-primary text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h6 class="card-title">전체 직급</h6>
                            <h2 class="mb-0">@(_statistics?.TotalPositions ?? 0)</h2>
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-sitemap fa-2x opacity-75"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-success text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h6 class="card-title">관리직</h6>
                            <h2 class="mb-0">@(_statistics?.ManagementPositions ?? 0)</h2>
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-users-cog fa-2x opacity-75"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-info text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h6 class="card-title">평균 최대급여</h6>
                            <h2 class="mb-0">@((_statistics?.AverageMaxSalary ?? 0).ToString("N0"))만원</h2>
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-money-bill-wave fa-2x opacity-75"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-warning text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h6 class="card-title">총 직원 수</h6>
                            <h2 class="mb-0">@(_statistics?.TotalEmployees ?? 0)</h2>
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-users fa-2x opacity-75"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- 검색 및 필터 -->
    <div class="row mb-3">
        <div class="col-md-6">
            <div class="input-group">
                <span class="input-group-text">
                    <i class="fas fa-search"></i>
                </span>
                <input type="text" class="form-control" placeholder="직급명으로 검색..."
                       @bind="searchTerm" @oninput="OnSearchChanged" />
            </div>
        </div>
        <div class="col-md-3">
            <select class="form-select" value="@selectedLevel" @onchange="OnLevelFilterChanged">
                <option value="">전체 레벨</option>
                @for (int i = 1; i <= 10; i++)
                {
                    <option value="@i">레벨 @i</option>
                }
            </select>
        </div>
        <div class="col-md-3">
            <select class="form-select" value="@managementFilter" @onchange="OnManagementFilterChanged">
                <option value="">전체</option>
                <option value="management">관리직만</option>
                <option value="staff">일반직만</option>
            </select>
        </div>
    </div>

    <!-- 로딩 상태 -->
    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">로딩 중...</span>
            </div>
            <p class="mt-2 text-muted">직급 정보를 불러오는 중...</p>
        </div>
    }
    else
    {
        <!-- 직급 목록 테이블 -->
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">
                    <i class="fas fa-list me-2"></i>직급 목록
                    <span class="badge bg-secondary ms-2">@@filteredPositions.Count개</span>
                </h5>
                <div class="d-flex gap-2">
                    <button class="btn btn-outline-secondary btn-sm" @onclick="RefreshData">
                        <i class="fas fa-sync-alt me-1"></i>새로고침
                    </button>
                </div>
            </div>
            <div class="card-body p-0">
                @if (filteredPositions.Any())
                {
                    <div class="table-responsive">
                        <table class="table table-hover mb-0">
                            <thead class="table-light">
                                <tr>
                                    <th>레벨</th>
                                    <th>직급명</th>
                                    <th>급여 범위</th>
                                    <th>평균 급여</th>
                                    <th>직원 수</th>
                                    <th>구분</th>
                                    <th>생성일</th>
                                    <th>작업</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var position in currentPagePositions)
                                {
                                    <tr>
                                        <td>
                                            <span class="badge badge-level-@position.Level">
                                                @position.Level
                                            </span>
                                        </td>
                                        <td>
                                            <div class="d-flex align-items-center">
                                                @if (position.IsManagementPosition)
                                                {
                                                    <i class="fas fa-crown text-warning me-2" title="관리직"></i>
                                                }
                                                else
                                                {
                                                    <i class="fas fa-user text-secondary me-2" title="일반직"></i>
                                                }
                                                <strong>@position.Title</strong>
                                            </div>
                                        </td>
                                        <td>
                                            <div class="salary-range">
                                                <small class="text-muted">최소:</small> @position.MinSalary.ToString("N0")만원<br />
                                                <small class="text-muted">최대:</small> @position.MaxSalary.ToString("N0")만원
                                            </div>
                                        </td>
                                        <td>
                                            <span class="fw-bold text-success">
                                                @position.AverageSalary.ToString("N0")만원
                                            </span>
                                        </td>
                                        <td>
                                            <span class="badge bg-info">
                                                @@position.EmployeeCount명
                                            </span>
                                        </td>
                                        <td>
                                            @if (position.IsManagementPosition)
                                            {
                                                <span class="badge bg-warning text-dark">관리직</span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-secondary">일반직</span>
                                            }
                                        </td>
                                        <td>
                                            <small class="text-muted">
                                                @position.CreatedAt.ToString("yyyy-MM-dd")
                                            </small>
                                        </td>
                                        <td>
                                            <div class="btn-group" role="group">
                                                <button type="button" class="btn btn-outline-primary btn-sm"
                                                        @onclick="() => OpenPositionModal(position)">
                                                    <i class="fas fa-edit"></i>
                                                </button>
                                                <button type="button" class="btn btn-outline-danger btn-sm"
                                                        @onclick="() => DeletePosition(position.Id)"
                                                        disabled="@(position.EmployeeCount > 0)">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                    <!-- 페이징 -->
                    @if (totalPages > 1)
                    {
                        <div class="card-footer">
                            <nav aria-label="직급 목록 페이징">
                                <ul class="pagination pagination-sm justify-content-center mb-0">
                                    <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                        <button class="page-link" @onclick="() => ChangePage(currentPage - 1)">이전</button>
                                    </li>

                                    @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                                    {
                                        <li class="page-item @(currentPage == i ? "active" : "")">
                                            <button class="page-link" @onclick="() => ChangePage(i)">@i</button>
                                        </li>
                                    }

                                    <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                        <button class="page-link" @onclick="() => ChangePage(currentPage + 1)">다음</button>
                                    </li>
                                </ul>
                            </nav>
                        </div>
                    }
                }
                else
                {
                    <div class="text-center py-4">
                        <i class="fas fa-sitemap fa-3x text-muted mb-3"></i>
                        <h5 class="text-muted">직급이 없습니다</h5>
                        <p class="text-muted">새 직급을 추가해보세요.</p>
                        <button type="button" class="btn btn-primary" @onclick="() => OpenPositionModal()">
                            <i class="fas fa-plus me-2"></i>직급 추가
                        </button>
                    </div>
                }
            </div>
        </div>
    }
</div>

<!-- 직급 생성/수정 모달 -->
<PositionFormModal @ref="positionFormModal" OnPositionSaved="OnPositionSaved" />

<!-- 확인 모달 -->
<div class="modal fade" id="confirmModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@confirmTitle</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                @confirmMessage
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">취소</button>
                <button type="button" class="btn btn-danger" @onclick="ConfirmDelete">삭제</button>
            </div>
        </div>
    </div>
</div>

@code {
    // 데이터
    private List<PositionDto> positions = new();
    private List<PositionDto> filteredPositions = new();
    private PositionStatisticsResponse? _statistics;

    // UI 상태
    private bool isLoading = true;
    private string searchTerm = string.Empty;
    private string selectedLevel = string.Empty;
    private string managementFilter = string.Empty;

    // 페이징
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages => (int)Math.Ceiling((double)filteredPositions.Count / pageSize);
    private List<PositionDto> currentPagePositions => filteredPositions
        .Skip((currentPage - 1) * pageSize)
        .Take(pageSize)
        .ToList();

    // 모달 관련
    private PositionFormModal positionFormModal = default!;
    private string confirmTitle = string.Empty;
    private string confirmMessage = string.Empty;
    private Guid positionIdToDelete = Guid.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            // 직급 목록과 통계를 병렬로 로드
            var positionsTask = PositionService.GetAllPositionsAsync();
            var statisticsTask = PositionService.GetPositionStatisticsAsync();

            positions = await positionsTask;
            _statistics = await statisticsTask;

            ApplyFilters();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "직급 데이터 로드 중 오류 발생");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void ApplyFilters()
    {
        var query = positions.AsEnumerable();

        // 검색어 필터
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            query = query.Where(p =>
                p.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
        }

        // 레벨 필터
        if (!string.IsNullOrWhiteSpace(selectedLevel) && int.TryParse(selectedLevel, out int level))
        {
            query = query.Where(p => p.Level == level);
        }

        // 관리직/일반직 필터
        if (!string.IsNullOrWhiteSpace(managementFilter))
        {
            if (managementFilter == "management")
                query = query.Where(p => p.IsManagementPosition);
            else if (managementFilter == "staff")
                query = query.Where(p => !p.IsManagementPosition);
        }

        // 레벨 순으로 정렬하고 리스트로 변환
        filteredPositions = query.OrderBy(p => p.Level).ThenBy(p => p.Title).ToList();

        // 페이지 리셋
        currentPage = 1;
        StateHasChanged();
    }

    private async Task OnSearchChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
        await Task.Delay(300); // 디바운싱
        ApplyFilters();
    }

    private void OnLevelFilterChanged(ChangeEventArgs e)
    {
        selectedLevel = e.Value?.ToString() ?? string.Empty;
        ApplyFilters();
    }

    private void OnManagementFilterChanged(ChangeEventArgs e)
    {
        managementFilter = e.Value?.ToString() ?? string.Empty;
        ApplyFilters();
    }

    private void OnFilterChanged()
    {
        ApplyFilters();
    }

    private void ChangePage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
            StateHasChanged();
        }
    }

    private async Task RefreshData()
    {
        await LoadData();
    }

    private async Task OpenPositionModal(PositionDto? position = null)
    {
        await positionFormModal.OpenAsync(position);
    }

    private async Task OnPositionSaved()
    {
        await LoadData();
    }

    private async Task DeletePosition(Guid positionId)
    {
        var position = positions.FirstOrDefault(p => p.Id == positionId);
        if (position == null) return;

        if (position.EmployeeCount > 0)
        {
            await JSRuntime.InvokeVoidAsync("alert", "직원이 배정된 직급은 삭제할 수 없습니다.");
            return;
        }

        positionIdToDelete = positionId;
        confirmTitle = "직급 삭제";
        confirmMessage = $"'{position.Title}' 직급을 삭제하시겠습니까? 이 작업은 되돌릴 수 없습니다.";

        // Bootstrap 모달 열기
        await JSRuntime.InvokeVoidAsync("bootstrap.Modal.getOrCreateInstance", await JSRuntime.InvokeAsync<object>("document.getElementById", "confirmModal"));
        await JSRuntime.InvokeVoidAsync("eval", "new bootstrap.Modal(document.getElementById('confirmModal')).show()");
    }

    private async Task ConfirmDelete()
    {
        try
        {
            bool success = await PositionService.DeletePositionAsync(positionIdToDelete);
            if (success)
            {
                await LoadData();
                // Bootstrap 모달 닫기
                await JSRuntime.InvokeVoidAsync("eval", "bootstrap.Modal.getInstance(document.getElementById('confirmModal')).hide()");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "직급 삭제에 실패했습니다.");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "직급 삭제 중 오류 발생: {PositionId}", positionIdToDelete);
            await JSRuntime.InvokeVoidAsync("alert", "직급 삭제 중 오류가 발생했습니다.");
        }
    }
}

<style>
    .badge-level-1 {
        background-color: #e3f2fd;
        color: #1565c0;
    }

    .badge-level-2 {
        background-color: #e8f5e8;
        color: #2e7d32;
    }

    .badge-level-3 {
        background-color: #fff3e0;
        color: #ef6c00;
    }

    .badge-level-4 {
        background-color: #fce4ec;
        color: #c2185b;
    }

    .badge-level-5 {
        background-color: #f3e5f5;
        color: #7b1fa2;
    }

    .badge-level-6 {
        background-color: #ffebee;
        color: #d32f2f;
    }

    .badge-level-7 {
        background-color: #e0f2f1;
        color: #00695c;
    }

    .badge-level-8 {
        background-color: #e1f5fe;
        color: #0277bd;
    }

    .badge-level-9 {
        background-color: #f1f8e9;
        color: #558b2f;
    }

    .badge-level-10 {
        background-color: #fff8e1;
        color: #ff8f00;
    }

    .salary-range {
        font-size: 0.875rem;
    }

    .card-header {
        background-color: #f8f9fa;
        border-bottom: 1px solid #dee2e6;
    }

    .table th {
        font-weight: 600;
        border-bottom: 2px solid #dee2e6;
    }

    .btn-group .btn {
        border-radius: 0.25rem;
    }

    .opacity-75 {
        opacity: 0.75;
    }
</style>