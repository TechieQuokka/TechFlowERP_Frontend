@using TechFlowERP.Models.DTOs.User
@using TechFlowERP.Models.DTOs.Employee
@using TechFlowERP.Models.Enums
@using TechFlowERP.Models.Requests.User
@using TechFlowERP.Web.Services.Interfaces
@using System.ComponentModel.DataAnnotations
@inject IUserManagementService UserService
@inject IEmployeeService EmployeeService
@inject IJSRuntime JSRuntime

<!-- 모달 -->
<div class="modal fade @(_isVisible ? "show" : "")" id="userFormModal" tabindex="-1"
     style="display: @(_isVisible ? "block" : "none")" data-bs-backdrop="static">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas @(_isEditMode ? "fa-edit" : "fa-plus") me-2"></i>
                    @(_isEditMode ? "사용자 수정" : "새 사용자 추가")
                </h5>
                <button type="button" class="btn-close" @onclick="CloseModal"></button>
            </div>

            <div class="modal-body">
                @if (_isLoading)
                {
                    <div class="text-center py-4">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">로딩 중...</span>
                        </div>
                        <p class="mt-2 text-muted">@(_isEditMode ? "사용자 정보를 불러오는 중..." : "직원 목록을 불러오는 중...")</p>
                    </div>
                }
                else
                {
                    <EditForm Model="_formModel" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />

                        <!-- 기본 정보 -->
                        <div class="row g-3">
                            <div class="col-md-6">
                                <label class="form-label">사용자명 <span class="text-danger">*</span></label>
                                <InputText class="@($"form-control {(_validationErrors.ContainsKey("Username") ? "is-invalid" : "")}")"
                                           @bind-Value="_formModel.Username"
                                           placeholder="영문, 숫자 조합" />
                                <ValidationMessage For="@(() => _formModel.Username)" />
                                @if (_validationErrors.ContainsKey("Username"))
                                {
                                    <div class="invalid-feedback d-block">@_validationErrors["Username"]</div>
                                }
                            </div>

                            <div class="col-md-6">
                                <label class="form-label">이메일 <span class="text-danger">*</span></label>
                                <InputText class="@($"form-control {(_validationErrors.ContainsKey("Email") ? "is-invalid" : "")}")"
                                           @bind-Value="_formModel.Email"
                                           type="email"
                                           placeholder="user@company.com" />
                                <ValidationMessage For="@(() => _formModel.Email)" />
                                @if (_validationErrors.ContainsKey("Email"))
                                {
                                    <div class="invalid-feedback d-block">@_validationErrors["Email"]</div>
                                }
                            </div>

                            @if (!_isEditMode)
                            {
                                <div class="col-md-6">
                                    <label class="form-label">비밀번호 <span class="text-danger">*</span></label>
                                    <div class="input-group">
                                        <InputText class="form-control"
                                                   @bind-Value="_formModel.Password"
                                                   type="@(_showPassword ? "text" : "password")"
                                                   placeholder="8자 이상, 대소문자/숫자/특수문자 포함" />
                                        <button class="btn btn-outline-secondary" type="button" @onclick="TogglePasswordVisibility">
                                            <i class="fas @(_showPassword ? "fa-eye-slash" : "fa-eye")"></i>
                                        </button>
                                    </div>
                                    <ValidationMessage For="@(() => _formModel.Password)" />
                                    <div class="form-text">최소 8자, 대소문자, 숫자, 특수문자 포함</div>
                                </div>

                                <div class="col-md-6">
                                    <label class="form-label">비밀번호 확인 <span class="text-danger">*</span></label>
                                    <InputText class="@($"form-control {(_passwordMismatch ? "is-invalid" : "")}")"
                                               @bind-Value="_confirmPassword"
                                               type="password"
                                               placeholder="비밀번호를 다시 입력하세요" />
                                    @if (_passwordMismatch)
                                    {
                                        <div class="invalid-feedback d-block">비밀번호가 일치하지 않습니다.</div>
                                    }
                                </div>
                            }

                            <div class="col-md-6">
                                <label class="form-label">역할 <span class="text-danger">*</span></label>
                                <InputSelect class="form-select" @bind-Value="_formModel.Role">
                                    @foreach (var role in Enum.GetValues<UserRole>())
                                    {
                                        <option value="@role">@GetRoleDisplayName(role)</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => _formModel.Role)" />
                            </div>

                            <div class="col-md-6">
                                <label class="form-label">연결된 직원</label>
                                <select class="form-select" @bind="_formModel.EmployeeId">
                                    <option value="">직원 선택 (선택사항)</option>
                                    @if (_employees?.Any() == true)
                                    {
                                        @foreach (var employee in _employees)
                                        {
                                            <option value="@employee.Id">
                                                @employee.Name (@employee.DepartmentName - @employee.PositionTitle)
                                            </option>
                                        }
                                    }
                                </select>
                                <div class="form-text">시스템 사용자와 직원 정보를 연결합니다.</div>
                            </div>

                            <div class="col-12">
                                <label class="form-label">테넌트 ID</label>
                                <InputText class="form-control" @bind-Value="_formModel.TenantId" readonly />
                                <div class="form-text">시스템에서 자동으로 할당됩니다.</div>
                            </div>
                        </div>

                        <!-- 추가 옵션 (수정 모드일 때만) -->
                        @if (_isEditMode && _currentUser != null)
                        {
                            <hr class="my-4" />
                            <h6 class="mb-3">계정 정보</h6>
                            <div class="row g-3">
                                <div class="col-md-4">
                                    <label class="form-label">계정 상태</label>
                                    <div class="form-control-plaintext">
                                        <span class="badge @(_currentUser.IsLocked ? "bg-danger" : "bg-success")">
                                            @(_currentUser.IsLocked ? "잠김" : "활성")
                                        </span>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <label class="form-label">최근 로그인</label>
                                    <div class="form-control-plaintext">
                                        @(_currentUser.LastLogin?.ToString("yyyy-MM-dd HH:mm") ?? "로그인 기록 없음")
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <label class="form-label">비밀번호 변경일</label>
                                    <div class="form-control-plaintext">
                                        @_currentUser.PasswordChangedAt.ToString("yyyy-MM-dd")
                                        @if (_currentUser.RequiresPasswordReset)
                                        {
                                            <span class="badge bg-warning text-dark ms-2">만료됨</span>
                                        }
                                    </div>
                                </div>
                            </div>
                        }
                    </EditForm>
                }
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseModal">취소</button>
                @if (!_isLoading)
                {
                    <button type="button" class="btn btn-primary" @onclick="HandleValidSubmit" disabled="@_isSaving">
                        @if (_isSaving)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        }
                        @(_isEditMode ? "수정" : "생성")
                    </button>
                }
            </div>
        </div>
    </div>
</div>

<!-- 백드롭 -->
@if (_isVisible)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter] public EventCallback<UserDto> OnUserSaved { get; set; }
    [Parameter] public EventCallback OnClosed { get; set; }

    private bool _isVisible = false;
    private bool _isEditMode = false;
    private bool _isLoading = false;
    private bool _isSaving = false;
    private bool _showPassword = false;
    private bool _passwordMismatch = false;

    private UserFormModel _formModel = new();
    private string _confirmPassword = string.Empty;
    private UserDto? _currentUser;
    private List<EmployeeDto> _employees = new();
    private Dictionary<string, string> _validationErrors = new();

    public async Task ShowCreateModal()
    {
        _isEditMode = false;
        _isVisible = true;
        _formModel = new UserFormModel
        {
            TenantId = "default-tenant",
            Role = UserRole.Employee
        };
        _confirmPassword = string.Empty;
        _validationErrors.Clear();

        await LoadEmployees();
        StateHasChanged();
    }

    public async Task ShowEditModal(Guid userId)
    {
        _isEditMode = true;
        _isVisible = true;
        _isLoading = true;
        _validationErrors.Clear();

        StateHasChanged();

        try
        {
            // 사용자 정보와 직원 목록을 병렬로 로드
            var userTask = UserService.GetUserByIdAsync(userId);
            var employeesTask = LoadEmployees();

            await Task.WhenAll(userTask, employeesTask);

            _currentUser = await userTask;

            if (_currentUser != null)
            {
                _formModel = new UserFormModel
                {
                    UserId = _currentUser.UserId,
                    Username = _currentUser.Username,
                    Email = _currentUser.Email,
                    Role = _currentUser.Role,
                    EmployeeId = _currentUser.EmployeeId,
                    TenantId = _currentUser.TenantId
                };
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "사용자 정보를 찾을 수 없습니다.");
                CloseModal();
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "사용자 정보 로드 실패", ex.Message);
            await JSRuntime.InvokeVoidAsync("alert", "사용자 정보를 불러오는 중 오류가 발생했습니다.");
            CloseModal();
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadEmployees()
    {
        try
        {
            _isLoading = true;
            // IEmployeeService의 실제 메서드 사용
            _employees = await EmployeeService.GetActiveEmployeesAsync();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "직원 목록 로드 실패", ex.Message);
            _employees = new List<EmployeeDto>();
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task HandleValidSubmit()
    {
        if (_isSaving) return;

        // 비밀번호 확인 (생성 모드일 때만)
        if (!_isEditMode)
        {
            _passwordMismatch = _formModel.Password != _confirmPassword;
            if (_passwordMismatch)
            {
                StateHasChanged();
                return;
            }
        }

        _isSaving = true;
        _validationErrors.Clear();
        StateHasChanged();

        try
        {
            UserDto? result = null;

            if (_isEditMode)
            {
                var updateRequest = new UpdateUserRequest
                {
                    UserId = _formModel.UserId,
                    Username = _formModel.Username,
                    Email = _formModel.Email,
                    Role = _formModel.Role,
                    EmployeeId = _formModel.EmployeeId
                };

                result = await UserService.UpdateUserAsync(updateRequest);
            }
            else
            {
                var createRequest = new CreateUserRequest
                {
                    Username = _formModel.Username,
                    Email = _formModel.Email,
                    Password = _formModel.Password,
                    Role = _formModel.Role,
                    EmployeeId = _formModel.EmployeeId,
                    TenantId = _formModel.TenantId
                };

                result = await UserService.CreateUserAsync(createRequest);
            }

            if (result != null)
            {
                await JSRuntime.InvokeVoidAsync("alert",
                    _isEditMode ? "사용자가 성공적으로 수정되었습니다." : "새 사용자가 성공적으로 생성되었습니다.");

                await OnUserSaved.InvokeAsync(result);
                CloseModal();
            }
            else
            {
                // 서버에서 검증 오류가 발생한 경우
                if (!_isEditMode)
                {
                    // 사용자명/이메일 중복 체크
                    var usernameAvailable = await UserService.IsUsernameAvailableAsync(_formModel.Username);
                    var emailAvailable = await UserService.IsEmailAvailableAsync(_formModel.Email);

                    if (!usernameAvailable)
                        _validationErrors["Username"] = "이미 사용 중인 사용자명입니다.";
                    if (!emailAvailable)
                        _validationErrors["Email"] = "이미 사용 중인 이메일입니다.";
                }

                if (!_validationErrors.Any())
                {
                    await JSRuntime.InvokeVoidAsync("alert", "사용자 저장 중 오류가 발생했습니다.");
                }
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "사용자 저장 실패", ex.Message);
            await JSRuntime.InvokeVoidAsync("alert", "사용자 저장 중 오류가 발생했습니다.");
        }
        finally
        {
            _isSaving = false;
            StateHasChanged();
        }
    }

    private void CloseModal()
    {
        _isVisible = false;
        _formModel = new();
        _confirmPassword = string.Empty;
        _currentUser = null;
        _validationErrors.Clear();
        _passwordMismatch = false;
        StateHasChanged();
        OnClosed.InvokeAsync();
    }

    private void TogglePasswordVisibility()
    {
        _showPassword = !_showPassword;
    }

    private string GetRoleDisplayName(UserRole role) => role switch
    {
        UserRole.Admin => "관리자",
        UserRole.Manager => "매니저",
        UserRole.Employee => "직원",
        UserRole.Finance => "재무",
        UserRole.HR => "인사",
        UserRole.ReadOnly => "읽기전용",
        _ => "알 수 없음"
    };

    // 폼 모델 클래스
    public class UserFormModel
    {
        public Guid UserId { get; set; }

        [Required(ErrorMessage = "사용자명은 필수입니다.")]
        [StringLength(50, ErrorMessage = "사용자명은 50자를 초과할 수 없습니다.")]
        public string Username { get; set; } = string.Empty;

        [Required(ErrorMessage = "이메일은 필수입니다.")]
        [EmailAddress(ErrorMessage = "올바른 이메일 형식이 아닙니다.")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "비밀번호는 필수입니다.")]
        [StringLength(100, MinimumLength = 8, ErrorMessage = "비밀번호는 8자 이상이어야 합니다.")]
        public string Password { get; set; } = string.Empty;

        [Required(ErrorMessage = "역할은 필수입니다.")]
        public UserRole Role { get; set; } = UserRole.Employee;

        public Guid? EmployeeId { get; set; }

        public string TenantId { get; set; } = "default-tenant";
    }
}