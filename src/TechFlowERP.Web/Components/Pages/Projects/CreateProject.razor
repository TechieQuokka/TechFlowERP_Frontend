@page "/projects/create"
@using TechFlowERP.Models.DTOs.Client
@using TechFlowERP.Models.DTOs.Employee
@using TechFlowERP.Models.DTOs.Project
@using TechFlowERP.Models.Requests.Project
@using TechFlowERP.Models.Enums
@using TechFlowERP.Web.Services.Interfaces
@using TechFlowERP.Shared.Components.Common
@inject IProjectService ProjectService
@inject IClientService ClientService
@inject IEmployeeService EmployeeService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject ILogger<CreateProject> Logger

<PageTitle>새 프로젝트 추가</PageTitle>

<div class="container-fluid">
    <!-- 📊 Header Section -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h2 class="mb-1">
                        <i class="fas fa-plus-circle me-2"></i>새 프로젝트 추가
                    </h2>
                    <nav aria-label="breadcrumb">
                        <ol class="breadcrumb">
                            <li class="breadcrumb-item">
                                <a href="/projects" class="text-decoration-none">프로젝트 관리</a>
                            </li>
                            <li class="breadcrumb-item active">새 프로젝트 추가</li>
                        </ol>
                    </nav>
                </div>
                <div>
                    <button class="btn btn-outline-secondary me-2" @onclick="NavigateBack">
                        <i class="fas fa-arrow-left me-2"></i>돌아가기
                    </button>
                </div>
            </div>
        </div>
    </div>

    @if (isLoading)
    {
        <LoadingSpinner />
    }
    else
    {
        <EditForm Model="createRequest" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />

            <div class="row">
                <!-- 📝 Main Form -->
                <div class="col-lg-8">
                    <!-- 기본 정보 -->
                    <div class="card mb-4">
                        <div class="card-header">
                            <h5 class="mb-0">
                                <i class="fas fa-info-circle me-2"></i>기본 정보
                            </h5>
                        </div>
                        <div class="card-body">
                            <div class="row g-3">
                                <!-- 프로젝트명 -->
                                <div class="col-md-6">
                                    <label class="form-label required">프로젝트명</label>
                                    <InputText @bind-Value="createRequest.Name"
                                               class="form-control"
                                               placeholder="웹사이트 리뉴얼 프로젝트" />
                                    <ValidationMessage For="@(() => createRequest.Name)" class="text-danger" />
                                </div>

                                <!-- 프로젝트 코드 -->
                                <div class="col-md-6">
                                    <label class="form-label required">프로젝트 코드</label>
                                    <InputText @bind-Value="createRequest.ProjectCode"
                                               class="form-control"
                                               placeholder="WEB-2024-001" />
                                    <ValidationMessage For="@(() => createRequest.ProjectCode)" class="text-danger" />
                                    <small class="text-muted">고유한 프로젝트 식별 코드</small>
                                </div>

                                <!-- 클라이언트 -->
                                <div class="col-md-6">
                                    <label class="form-label required">클라이언트</label>
                                    <InputSelect @bind-Value="createRequest.ClientId" class="form-select">
                                        <option value="">클라이언트 선택</option>
                                        @foreach (var client in clients)
                                        {
                                            <option value="@client.Id">@client.CompanyName</option>
                                        }
                                    </InputSelect>
                                    <ValidationMessage For="@(() => createRequest.ClientId)" class="text-danger" />
                                    @if (clients.Count == 0)
                                    {
                                        <small class="text-muted">
                                            사용 가능한 클라이언트가 없습니다.
                                            <a href="/clients/create" class="text-decoration-none">클라이언트를 먼저 추가하세요.</a>
                                        </small>
                                    }
                                </div>

                                <!-- 프로젝트 매니저 -->
                                <div class="col-md-6">
                                    <label class="form-label required">프로젝트 매니저</label>
                                    <InputSelect @bind-Value="createRequest.ManagerId" class="form-select">
                                        <option value="">매니저 선택</option>
                                        @foreach (var manager in managers)
                                        {
                                            <option value="@manager.Id">@manager.Name (@manager.DepartmentName)</option>
                                        }
                                    </InputSelect>
                                    <ValidationMessage For="@(() => createRequest.ManagerId)" class="text-danger" />
                                </div>

                                <!-- 프로젝트 유형 -->
                                <div class="col-md-4">
                                    <label class="form-label">프로젝트 유형</label>
                                    <InputSelect @bind-Value="createRequest.ProjectType" class="form-select">
                                        <option value="@ProjectType.Fixed">고정가</option>
                                        <option value="@ProjectType.TimeAndMaterial">시간당</option>
                                        <option value="@ProjectType.Retainer">유지보수</option>
                                    </InputSelect>
                                    <ValidationMessage For="@(() => createRequest.ProjectType)" class="text-danger" />
                                </div>

                                <!-- 위험도 -->
                                <div class="col-md-4">
                                    <label class="form-label">위험도</label>
                                    <InputSelect @bind-Value="createRequest.RiskLevel" class="form-select">
                                        <option value="@RiskLevel.Low">낮음</option>
                                        <option value="@RiskLevel.Medium">보통</option>
                                        <option value="@RiskLevel.High">높음</option>
                                    </InputSelect>
                                    <ValidationMessage For="@(() => createRequest.RiskLevel)" class="text-danger" />
                                </div>

                                <!-- 상태 -->
                                <div class="col-md-4">
                                    <label class="form-label">상태</label>
                                    <InputSelect @bind-Value="createRequest.Status" class="form-select">
                                        <option value="@ProjectStatus.Planning">기획</option>
                                        <option value="@ProjectStatus.Active">진행중</option>
                                        <option value="@ProjectStatus.OnHold">보류</option>
                                    </InputSelect>
                                    <ValidationMessage For="@(() => createRequest.Status)" class="text-danger" />
                                </div>

                                <!-- 시작일 -->
                                <div class="col-md-6">
                                    <label class="form-label required">시작일</label>
                                    <InputDate @bind-Value="createRequest.StartDate"
                                               class="form-control" />
                                    <ValidationMessage For="@(() => createRequest.StartDate)" class="text-danger" />
                                </div>

                                <!-- 종료일 -->
                                <div class="col-md-6">
                                    <label class="form-label">종료일 (예정)</label>
                                    <InputDate @bind-Value="createRequest.EndDate"
                                               class="form-control" />
                                    <ValidationMessage For="@(() => createRequest.EndDate)" class="text-danger" />
                                    <small class="text-muted">선택사항 (나중에 설정 가능)</small>
                                </div>

                                <!-- 예산 -->
                                <div class="col-md-6">
                                    <label class="form-label">예산 (만원)</label>
                                    <InputNumber @bind-Value="createRequest.Budget"
                                                 class="form-control"
                                                 placeholder="5000" />
                                    <ValidationMessage For="@(() => createRequest.Budget)" class="text-danger" />
                                </div>

                                <!-- 수익률 -->
                                <div class="col-md-6">
                                    <label class="form-label">목표 수익률 (%)</label>
                                    <InputNumber @bind-Value="createRequest.ProfitMargin"
                                                 class="form-control"
                                                 placeholder="20.0" />
                                    <ValidationMessage For="@(() => createRequest.ProfitMargin)" class="text-danger" />
                                    <small class="text-muted">일반적으로 15-25% 수준</small>
                                </div>

                                <!-- 설명 -->
                                <div class="col-12">
                                    <label class="form-label">프로젝트 설명</label>
                                    <InputTextArea @bind-Value="createRequest.Description"
                                                   class="form-control"
                                                   rows="3"
                                                   placeholder="프로젝트의 목적, 범위, 주요 기능 등을 설명하세요..." />
                                    <ValidationMessage For="@(() => createRequest.Description)" class="text-danger" />
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- 기술 스택 -->
                    <div class="card mb-4">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">
                                <i class="fas fa-code me-2"></i>기술 스택
                            </h5>
                            <button type="button" class="btn btn-sm btn-outline-primary" @onclick="AddTechnology">
                                <i class="fas fa-plus me-1"></i>기술 추가
                            </button>
                        </div>
                        <div class="card-body">
                            @if (technologies.Any())
                            {
                                <div class="row g-3">
                                    @for (int i = 0; i < technologies.Count; i++)
                                    {
                                        var index = i; // 클로저 변수 이슈 해결
                                        var tech = technologies[index];

                                        <div class="col-md-6">
                                            <div class="border rounded p-3 position-relative">
                                                <button type="button"
                                                        class="btn btn-sm btn-outline-danger position-absolute top-0 end-0 m-2"
                                                        @onclick="@(() => RemoveTechnology(index))">
                                                    <i class="fas fa-times"></i>
                                                </button>

                                                <div class="row g-2">
                                                    <div class="col-8">
                                                        <label class="form-label">기술명</label>
                                                        <InputText @bind-Value="tech.Technology"
                                                                   class="form-control"
                                                                   placeholder="React, .NET 등" />
                                                    </div>
                                                    <div class="col-4">
                                                        <label class="form-label">버전</label>
                                                        <InputText @bind-Value="tech.Version"
                                                                   class="form-control"
                                                                   placeholder="18.0" />
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                            else
                            {
                                <div class="text-center py-4 text-muted">
                                    <i class="fas fa-code fa-2x mb-2"></i>
                                    <p>프로젝트에서 사용할 기술 스택을 추가해보세요.</p>
                                    <button type="button" class="btn btn-outline-primary" @onclick="AddTechnology">
                                        <i class="fas fa-plus me-2"></i>첫 번째 기술 추가
                                    </button>
                                </div>
                            }
                        </div>
                    </div>

                    <!-- 팀원 할당 -->
                    <div class="card">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">
                                <i class="fas fa-users me-2"></i>팀원 할당
                            </h5>
                            <button type="button" class="btn btn-sm btn-outline-primary" @onclick="AddTeamMember">
                                <i class="fas fa-user-plus me-1"></i>팀원 추가
                            </button>
                        </div>
                        <div class="card-body">
                            @if (teamMembers.Any())
                            {
                                <div class="row g-3">
                                    @for (int i = 0; i < teamMembers.Count; i++)
                                    {
                                        var index = i;
                                        var member = teamMembers[index];

                                        <div class="col-12">
                                            <div class="border rounded p-3 position-relative">
                                                <button type="button"
                                                        class="btn btn-sm btn-outline-danger position-absolute top-0 end-0 m-2"
                                                        @onclick="@(() => RemoveTeamMember(index))">
                                                    <i class="fas fa-times"></i>
                                                </button>

                                                <div class="row g-3">
                                                    <div class="col-md-4">
                                                        <label class="form-label">직원</label>
                                                        <InputSelect @bind-Value="member.EmployeeId" class="form-select">
                                                            <option value="">직원 선택</option>
                                                            @foreach (var employee in employees)
                                                            {
                                                                <option value="@employee.Id">@employee.Name (@employee.DepartmentName)</option>
                                                            }
                                                        </InputSelect>
                                                    </div>
                                                    <div class="col-md-3">
                                                        <label class="form-label">역할</label>
                                                        <InputText @bind-Value="member.Role"
                                                                   class="form-control"
                                                                   placeholder="개발자, 디자이너 등" />
                                                    </div>
                                                    <div class="col-md-2">
                                                        <label class="form-label">참여율 (%)</label>
                                                        <InputNumber @bind-Value="member.AllocationPercentage"
                                                                     class="form-control"
                                                                     placeholder="100" />
                                                    </div>
                                                    <div class="col-md-3">
                                                        <label class="form-label">시급 (만원)</label>
                                                        <InputNumber @bind-Value="member.HourlyRate"
                                                                     class="form-control"
                                                                     placeholder="5.0" />
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                            else
                            {
                                <div class="text-center py-4 text-muted">
                                    <i class="fas fa-users fa-2x mb-2"></i>
                                    <p>프로젝트에 참여할 팀원을 추가해보세요.</p>
                                    <button type="button" class="btn btn-outline-primary" @onclick="AddTeamMember">
                                        <i class="fas fa-user-plus me-2"></i>첫 번째 팀원 추가
                                    </button>
                                </div>
                            }
                        </div>
                    </div>
                </div>

                <!-- 📊 Info Panel -->
                <div class="col-lg-4">
                    <div class="card position-sticky" style="top: 20px;">
                        <div class="card-header">
                            <h5 class="mb-0">
                                <i class="fas fa-calculator me-2"></i>프로젝트 정보
                            </h5>
                        </div>
                        <div class="card-body">
                            <!-- 선택된 클라이언트 정보 -->
                            @if (selectedClient != null)
                            {
                                <div class="mb-3">
                                    <h6 class="text-primary">선택된 클라이언트</h6>
                                    <div class="bg-light p-3 rounded">
                                        <div><strong>@selectedClient.CompanyName</strong></div>
                                        <small class="text-muted">업종: @selectedClient.Industry</small><br>
                                        <small class="text-muted">규모: @selectedClient.SizeCategory</small>
                                        @if (selectedClient.ContractValue > 0)
                                        {
                                            <br>
                                
                                            <small class="text-muted">계약 금액: @selectedClient.ContractValue.ToString("N0")만원</small>
                                        }
                                    </div>
                                </div>
                            }

                            <!-- 예산 계산 -->
                            @if (createRequest.Budget > 0)
                            {
                                <div class="mb-3">
                                    <h6 class="text-success">예산 분석</h6>
                                    <div class="bg-light p-3 rounded">
                                        <div class="d-flex justify-content-between">
                                            <span>총 예산:</span>
                                            <strong>@createRequest.Budget.ToString("N0")만원</strong>
                                        </div>
                                        @if (createRequest.ProfitMargin > 0)
                                        {
                                            <div class="d-flex justify-content-between">
                                                <span>목표 수익:</span>
                                                <strong>@((createRequest.Budget * createRequest.ProfitMargin / 100).ToString("N0"))만원</strong>
                                            </div>
                                            <div class="d-flex justify-content-between">
                                                <span>실제 비용:</span>
                                                <strong>@((createRequest.Budget * (100 - createRequest.ProfitMargin) / 100).ToString("N0"))만원</strong>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }

                            <!-- 기간 정보 -->
                            @if (createRequest.EndDate.HasValue)
                            {
                                <div class="mb-3">
                                    <h6 class="text-info">프로젝트 기간</h6>
                                    <div class="bg-light p-3 rounded">
                                        <div>시작: @createRequest.StartDate.ToString("yyyy-MM-dd")</div>
                                        <div>종료: @createRequest.EndDate.Value.ToString("yyyy-MM-dd")</div>
                                        <div><strong>총 @((createRequest.EndDate.Value - createRequest.StartDate).Days)일</strong></div>
                                    </div>
                                </div>
                            }

                            <!-- 팀 정보 -->
                            @if (teamMembers.Any())
                            {
                                <div class="mb-3">
                                    <h6 class="text-warning">팀 구성</h6>
                                    <div class="bg-light p-3 rounded">
                                        <div>총 팀원: @@teamMembers.Count명</div>
                                        <div>평균 참여율: @(teamMembers.Any() ? teamMembers.Average(t => t.AllocationPercentage).ToString("F1") : "0")%</div>
                                        @if (teamMembers.Any(t => t.HourlyRate > 0))
                                        {
                                            <div>평균 시급: @teamMembers.Where(t => t.HourlyRate > 0).Average(t => t.HourlyRate).ToString("F1")만원</div>
                                        }
                                    </div>
                                </div>
                            }

                            <!-- 저장 버튼 -->
                            <div class="d-grid gap-2">
                                <button type="submit"
                                        class="btn btn-primary"
                                        disabled="@isSubmitting">
                                    @if (isSubmitting)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2"></span>
                                        <span>생성 중...</span>
                                    }
                                    else
                                    {
                                        <i class="fas fa-save me-2"></i>
                                        <span>프로젝트 생성</span>
                                    }
                                </button>
                                <button type="button"
                                        class="btn btn-outline-secondary"
                                        @onclick="NavigateBack"
                                        disabled="@isSubmitting">
                                    <i class="fas fa-times me-2"></i>취소
                                </button>
                            </div>

                            <!-- 입력 팁 -->
                            <div class="mt-3">
                                <h6 class="text-muted">입력 팁</h6>
                                <ul class="list-unstyled small text-muted">
                                    <li><i class="fas fa-check text-success me-2"></i>프로젝트명과 코드는 필수입니다</li>
                                    <li><i class="fas fa-check text-success me-2"></i>클라이언트를 먼저 등록해주세요</li>
                                    <li><i class="fas fa-check text-success me-2"></i>기술 스택은 나중에도 추가 가능합니다</li>
                                    <li><i class="fas fa-check text-success me-2"></i>팀원은 프로젝트 생성 후에도 변경 가능합니다</li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </EditForm>
    }
</div>

<style>
    .required::after {
        content: " *";
        color: red;
    }

    .position-sticky {
        position: -webkit-sticky;
        position: sticky;
    }
</style>

@code {
    // 📊 Data Properties
    private CreateProjectRequest createRequest = new() { StartDate = DateTime.Today };
    private List<ClientDto> clients = new();
    private List<EmployeeDto> employees = new();
    private List<EmployeeDto> managers = new();

    // 로컬 컬렉션들 (CreateProjectRequest에 없는 속성들을 위해)
    private List<CreateProjectTechnologyRequest> technologies = new();
    private List<CreateTeamMemberRequest> teamMembers = new();

    // 🔄 State Properties
    private bool isLoading = true;
    private bool isSubmitting = false;

    // 💡 Computed Properties
    private ClientDto? selectedClient =>
        createRequest.ClientId != Guid.Empty ?
        clients.FirstOrDefault(c => c.Id == createRequest.ClientId) : null;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            // 병렬로 데이터 로드
            var tasks = new[]
            {
                LoadClients(),
                LoadEmployees()
            };

            await Task.WhenAll(tasks);

            // 매니저 필터링
            managers = employees.Where(e => e.PositionTitle?.Contains("매니저") == true ||
                                           e.PositionTitle?.Contains("팀장") == true ||
                                           e.PositionTitle?.Contains("부장") == true ||
                                           e.PositionTitle?.Contains("이사") == true).ToList();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "데이터 로드 중 오류 발생");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadClients()
    {
        var response = await ClientService.GetClientsAsync(1, 1000);
        if (response.Success && response.Data != null)
        {
            clients = response.Data.Items;
        }
    }

    private async Task LoadEmployees()
    {
        employees = await EmployeeService.GetActiveEmployeesAsync();
    }

    private async Task HandleValidSubmit()
    {
        if (isSubmitting) return;

        isSubmitting = true;
        StateHasChanged();

        try
        {
            // 로컬 컬렉션들을 createRequest에 매핑 (필요한 경우)
            // 여기서 technologies와 teamMembers를 적절한 방식으로 처리

            var result = await ProjectService.CreateProjectAsync(createRequest);

            if (result != null)
            {
                // 성공 시 프로젝트 상세 페이지로 이동
                Navigation.NavigateTo($"/projects/{result.Id}");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "프로젝트 생성에 실패했습니다. 다시 시도해주세요.");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "프로젝트 생성 중 오류 발생");
            await JSRuntime.InvokeVoidAsync("alert", "프로젝트 생성 중 오류가 발생했습니다.");
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }

    // 🔧 Technologies Management
    private void AddTechnology()
    {
        technologies.Add(new CreateProjectTechnologyRequest());
        StateHasChanged();
    }

    private void RemoveTechnology(int index)
    {
        if (index >= 0 && index < technologies.Count)
        {
            technologies.RemoveAt(index);
            StateHasChanged();
        }
    }

    // 👥 Team Members Management
    private void AddTeamMember()
    {
        teamMembers.Add(new CreateTeamMemberRequest
        {
            AllocationPercentage = 100,
            StartDate = createRequest.StartDate,
            EndDate = createRequest.EndDate
        });
        StateHasChanged();
    }

    private void RemoveTeamMember(int index)
    {
        if (index >= 0 && index < teamMembers.Count)
        {
            teamMembers.RemoveAt(index);
            StateHasChanged();
        }
    }

    // 🧭 Navigation
    private void NavigateBack()
    {
        Navigation.NavigateTo("/projects");
    }

    // 📊 Helper Classes (Request DTOs)
    public class CreateProjectTechnologyRequest
    {
        public string Technology { get; set; } = string.Empty;
        public string Version { get; set; } = string.Empty;
    }

    public class CreateTeamMemberRequest
    {
        public Guid EmployeeId { get; set; }
        public string Role { get; set; } = string.Empty;
        public int AllocationPercentage { get; set; } = 100;
        public decimal HourlyRate { get; set; }
        public DateTime StartDate { get; set; }
        public DateTime? EndDate { get; set; }
    }
}