@page "/timeapproval"
@using TechFlowERP.Models.DTOs.TimeEntry
@using TechFlowERP.Models.DTOs.Employee
@using TechFlowERP.Models.DTOs.Project
@using TechFlowERP.Models.Requests.TimeEntry
@using TechFlowERP.Web.Services.Interfaces
@using System.ComponentModel.DataAnnotations
@inject ITimeEntryService TimeEntryService
@inject IEmployeeService EmployeeService
@inject IProjectService ProjectService
@inject IJSRuntime JSRuntime

<PageTitle>시간 승인</PageTitle>

<div class="container-fluid">
    <!-- 헤더 영역 -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <h2 class="mb-0">
                    <i class="fas fa-check-circle me-2"></i>
                    시간 승인 관리
                </h2>

                <!-- 필터 및 액션 버튼 -->
                <div class="d-flex gap-2">
                    <button class="btn btn-success" @onclick="ApproveSelected" disabled="@(!selectedEntries.Any())">
                        <i class="fas fa-check me-1"></i>
                        선택 승인 (@selectedEntries.Count)
                    </button>
                    <button class="btn btn-danger" @onclick="RejectSelected" disabled="@(!selectedEntries.Any())">
                        <i class="fas fa-times me-1"></i>
                        선택 거부 (@selectedEntries.Count)
                    </button>
                    <button class="btn btn-outline-primary" @onclick="LoadData">
                        <i class="fas fa-sync me-1"></i>
                        새로고침
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- 필터 영역 -->
    <div class="card mb-4">
        <div class="card-body">
            <div class="row g-3">
                <div class="col-md-3">
                    <label class="form-label">직원</label>
                    <select value="@selectedEmployeeId" @onchange="OnEmployeeChanged" class="form-select">
                        <option value="">전체 직원</option>
                        @foreach (var employee in employees)
                        {
                            <option value="@employee.Id">@employee.Name</option>
                        }
                    </select>
                </div>

                <div class="col-md-3">
                    <label class="form-label">프로젝트</label>
                    <select value="@selectedProjectId" @onchange="OnProjectChanged" class="form-select">
                        <option value="">전체 프로젝트</option>
                        @foreach (var project in projects)
                        {
                            <option value="@project.Id">@project.Name</option>
                        }
                    </select>
                </div>

                <div class="col-md-2">
                    <label class="form-label">시작 날짜</label>
                    <input type="date" value="@(startDate?.ToString("yyyy-MM-dd"))" @onchange="OnStartDateChanged" class="form-control" />
                </div>

                <div class="col-md-2">
                    <label class="form-label">종료 날짜</label>
                    <input type="date" value="@(endDate?.ToString("yyyy-MM-dd"))" @onchange="OnEndDateChanged" class="form-control" />
                </div>

                <div class="col-md-2">
                    <label class="form-label">상태</label>
                    <select value="@selectedStatus" @onchange="OnStatusChanged" class="form-select">
                        <option value="">전체</option>
                        <option value="pending">승인 대기</option>
                        <option value="approved">승인됨</option>
                        <option value="rejected">거부됨</option>
                    </select>
                </div>
            </div>
        </div>
    </div>

    <!-- 로딩 상태 -->
    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-3">승인 대기 중인 시간 기록을 불러오는 중...</p>
        </div>
    }
    else
    {
        <!-- 요약 정보 -->
        <div class="row mb-4">
            <div class="col-md-3">
                <div class="card bg-warning text-white">
                    <div class="card-body">
                        <h6 class="card-title">승인 대기</h6>
                        <h4 class="mb-0">@@pendingCount건</h4>
                        <small>@pendingHours.ToString("F1")시간</small>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card bg-success text-white">
                    <div class="card-body">
                        <h6 class="card-title">승인 완료</h6>
                        <h4 class="mb-0">@@approvedCount건</h4>
                        <small>@approvedHours.ToString("F1")시간</small>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card bg-danger text-white">
                    <div class="card-body">
                        <h6 class="card-title">거부됨</h6>
                        <h4 class="mb-0">@@rejectedCount건</h4>
                        <small>@rejectedHours.ToString("F1")시간</small>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card bg-info text-white">
                    <div class="card-body">
                        <h6 class="card-title">총 시간</h6>
                        <h4 class="mb-0">@totalHours.ToString("F1")h</h4>
                        <small>청구가능: @billableHours.ToString("F1")h</small>
                    </div>
                </div>
            </div>
        </div>

        <!-- 시간 기록 목록 -->
        <div class="card">
            <div class="card-header">
                <div class="d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">시간 기록 목록</h5>
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" @onchange="ToggleSelectAll"
                               checked="@isAllSelected" id="selectAllCheck">
                        <label class="form-check-label" for="selectAllCheck">
                            전체 선택
                        </label>
                    </div>
                </div>
            </div>
            <div class="card-body p-0">
                @if (timeEntries.Any())
                {
                    <div class="table-responsive">
                        <table class="table table-hover mb-0">
                            <thead class="table-light">
                                <tr>
                                    <th style="width: 50px;">
                                        <input type="checkbox" @onchange="ToggleSelectAll" checked="@isAllSelected" class="form-check-input">
                                    </th>
                                    <th>직원</th>
                                    <th>프로젝트</th>
                                    <th>날짜</th>
                                    <th>시간</th>
                                    <th>청구</th>
                                    <th>상태</th>
                                    <th>작업 설명</th>
                                    <th>작업</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var entry in timeEntries)
                                {
                                    <tr class="@(selectedEntries.Contains(entry.Id) ? "table-info" : "")">
                                        <td>
                                            <input type="checkbox" @onchange="@(e => ToggleSelection(entry.Id, e))"
                                                   checked="@selectedEntries.Contains(entry.Id)" class="form-check-input">
                                        </td>
                                        <td>
                                            <div class="d-flex align-items-center">
                                                <div class="me-2">
                                                    <div class="avatar-circle bg-primary text-white">
                                                        @GetEmployeeInitials(entry.EmployeeName)
                                                    </div>
                                                </div>
                                                <div>
                                                    <div class="fw-semibold">@entry.EmployeeName</div>
                                                    <small class="text-muted">@GetEmployeeDepartment(entry.EmployeeId)</small>
                                                </div>
                                            </div>
                                        </td>
                                        <td>
                                            <div>
                                                <div class="fw-semibold">@entry.ProjectName</div>
                                                <small class="text-muted">@GetProjectClient(entry.ProjectId)</small>
                                            </div>
                                        </td>
                                        <td>
                                            <div>@entry.Date.ToString("MM/dd (ddd)")</div>
                                            <small class="text-muted">@entry.Date.ToString("yyyy")</small>
                                        </td>
                                        <td>
                                            <span class="badge bg-primary fs-6">@entry.Hours.ToString("F1")h</span>
                                        </td>
                                        <td>
                                            <span class="badge @(entry.Billable ? "bg-success" : "bg-secondary")">
                                                @(entry.Billable ? "청구가능" : "비청구")
                                            </span>
                                        </td>
                                        <td>
                                            <span class="badge @GetStatusBadgeClass(entry)">
                                                @GetStatusText(entry)
                                            </span>
                                        </td>
                                        <td>
                                            <div class="task-description" title="@entry.TaskDescription">
                                                @(entry.TaskDescription?.Length > 50 ?
                                                                                    entry.TaskDescription.Substring(0, 50) + "..." :
                                                                                    entry.TaskDescription)
                                </div>
                            </td>
                            <td>
                                <div class="btn-group btn-group-sm">
                                    @if (!entry.Approved)
                                                {
                                                    <button class="btn btn-outline-success"
                                                            @onclick="@(() => ApproveEntry(entry.Id))"
                                                            title="승인">
                                                        <i class="fas fa-check"></i>
                                                    </button>
                                                    <button class="btn btn-outline-danger"
                                                            @onclick="@(() => RejectEntry(entry.Id))"
                                                            title="거부">
                                                        <i class="fas fa-times"></i>
                                                    </button>
                                                }
                                                <button class="btn btn-outline-info"
                                                        @onclick="@(() => ViewDetails(entry))"
                                                        title="상세보기">
                                                    <i class="fas fa-eye"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                    <!-- 페이징 -->
                    @if (totalPages > 1)
                    {
                        <div class="d-flex justify-content-center mt-3">
                            <nav>
                                <ul class="pagination">
                                    <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                        <button class="page-link" @onclick="() => ChangePage(currentPage - 1)">이전</button>
                                    </li>

                                    @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                                    {
                                        <li class="page-item @(i == currentPage ? "active" : "")">
                                            <button class="page-link" @onclick="() => ChangePage(i)">@i</button>
                                        </li>
                                    }

                                    <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                        <button class="page-link" @onclick="() => ChangePage(currentPage + 1)">다음</button>
                                    </li>
                                </ul>
                            </nav>
                        </div>
                    }
                }
                else
                {
                    <div class="text-center py-5">
                        <i class="fas fa-clock fa-3x text-muted mb-3"></i>
                        <h5 class="text-muted">승인할 시간 기록이 없습니다</h5>
                        <p class="text-muted">필터 조건을 변경해보세요.</p>
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    // 데이터
    private List<TimeEntryDto> timeEntries = new();
    private List<EmployeeDto> employees = new();
    private List<ProjectDto> projects = new();

    // 필터
    private string selectedEmployeeId = "";
    private string selectedProjectId = "";
    private DateTime? startDate = DateTime.Today.AddDays(-30);
    private DateTime? endDate = DateTime.Today;
    private string selectedStatus = "pending";

    // 페이징
    private int currentPage = 1;
    private int pageSize = 20;
    private int totalPages = 1;
    private int totalCount = 0;

    // 상태
    private bool isLoading = true;
    private HashSet<Guid> selectedEntries = new();
    private bool isAllSelected = false;

    // 요약 데이터
    private int pendingCount = 0;
    private int approvedCount = 0;
    private int rejectedCount = 0;
    private decimal pendingHours = 0;
    private decimal approvedHours = 0;
    private decimal rejectedHours = 0;
    private decimal totalHours = 0;
    private decimal billableHours = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadReferenceData();
        await LoadData();
    }

    private async Task LoadReferenceData()
    {
        try
        {
            // 직원 목록 로드
            var employeeResponse = await EmployeeService.GetEmployeesAsync();
            employees = employeeResponse?.Data?.Items ?? new List<EmployeeDto>();

            // 프로젝트 목록 로드
            var projectResponse = await ProjectService.GetProjectsAsync();
            projects = projectResponse?.Data?.Items ?? new List<ProjectDto>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading reference data: {ex.Message}");
        }
    }

    private async Task LoadData()
    {
        isLoading = true;
        try
        {
            Guid? employeeFilter = string.IsNullOrEmpty(selectedEmployeeId) ? null : Guid.Parse(selectedEmployeeId);
            Guid? projectFilter = string.IsNullOrEmpty(selectedProjectId) ? null : Guid.Parse(selectedProjectId);
            bool? approvedFilter = selectedStatus switch
            {
                "pending" => false,
                "approved" => true,
                _ => null
            };

            var response = await TimeEntryService.GetTimeEntriesAsync(
                pageNumber: currentPage,
                pageSize: pageSize,
                employeeId: employeeFilter,
                projectId: projectFilter,
                startDate: startDate,
                endDate: endDate,
                approved: approvedFilter);

            if (response?.Data != null)
            {
                timeEntries = response.Data.Items ?? new List<TimeEntryDto>();
                totalCount = response.Data.TotalCount;
                totalPages = (int)Math.Ceiling((double)totalCount / pageSize);
            }

            CalculateSummary();
            selectedEntries.Clear();
            UpdateSelectAllState();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading time entries: {ex.Message}");
            // 폴백 데이터 사용
            UseLocalFallbackData();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    // 이벤트 핸들러 메서드들 추가
    private async Task OnEmployeeChanged(ChangeEventArgs e)
    {
        selectedEmployeeId = e.Value?.ToString() ?? "";
        currentPage = 1; // 필터 변경시 첫 페이지로 이동
        await LoadData();
    }

    private async Task OnProjectChanged(ChangeEventArgs e)
    {
        selectedProjectId = e.Value?.ToString() ?? "";
        currentPage = 1;
        await LoadData();
    }

    private async Task OnStartDateChanged(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value?.ToString(), out var date))
        {
            startDate = date;
            currentPage = 1;
            await LoadData();
        }
    }

    private async Task OnEndDateChanged(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value?.ToString(), out var date))
        {
            endDate = date;
            currentPage = 1;
            await LoadData();
        }
    }

    private async Task OnStatusChanged(ChangeEventArgs e)
    {
        selectedStatus = e.Value?.ToString() ?? "";
        currentPage = 1;
        await LoadData();
    }

    private void CalculateSummary()
    {
        pendingCount = timeEntries.Count(e => !e.Approved);
        approvedCount = timeEntries.Count(e => e.Approved);
        rejectedCount = 0; // 거부 상태 구현 필요시 추가

        pendingHours = timeEntries.Where(e => !e.Approved).Sum(e => e.Hours);
        approvedHours = timeEntries.Where(e => e.Approved).Sum(e => e.Hours);
        rejectedHours = 0;

        totalHours = timeEntries.Sum(e => e.Hours);
        billableHours = timeEntries.Where(e => e.Billable).Sum(e => e.Hours);
    }

    private async Task ChangePage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
            await LoadData();
        }
    }

    private void ToggleSelection(Guid entryId, ChangeEventArgs e)
    {
        if ((bool)e.Value!)
            selectedEntries.Add(entryId);
        else
            selectedEntries.Remove(entryId);

        UpdateSelectAllState();
    }

    private void ToggleSelectAll(ChangeEventArgs e)
    {
        if ((bool)e.Value!)
        {
            selectedEntries = timeEntries.Where(entry => !entry.Approved).Select(entry => entry.Id).ToHashSet();
        }
        else
        {
            selectedEntries.Clear();
        }

        UpdateSelectAllState();
    }

    private void UpdateSelectAllState()
    {
        var selectableEntries = timeEntries.Where(e => !e.Approved).ToList();
        isAllSelected = selectableEntries.Any() && selectableEntries.All(e => selectedEntries.Contains(e.Id));
    }

    private async Task ApproveSelected()
    {
        if (!selectedEntries.Any()) return;

        if (await JSRuntime.InvokeAsync<bool>("confirm", $"선택한 {selectedEntries.Count}건의 시간 기록을 승인하시겠습니까?"))
        {
            await ProcessBulkApproval(selectedEntries.ToList(), true);
        }
    }

    private async Task RejectSelected()
    {
        if (!selectedEntries.Any()) return;

        if (await JSRuntime.InvokeAsync<bool>("confirm", $"선택한 {selectedEntries.Count}건의 시간 기록을 거부하시겠습니까?"))
        {
            await ProcessBulkApproval(selectedEntries.ToList(), false);
        }
    }

    private async Task ApproveEntry(Guid entryId)
    {
        await ProcessBulkApproval(new List<Guid> { entryId }, true);
    }

    private async Task RejectEntry(Guid entryId)
    {
        await ProcessBulkApproval(new List<Guid> { entryId }, false);
    }

    private async Task ProcessBulkApproval(List<Guid> entryIds, bool approved)
    {
        try
        {
            if (approved)
            {
                var request = new ApproveTimeEntryRequest { TimeEntryIds = entryIds };
                await TimeEntryService.ApproveTimeEntriesAsync(request);
            }
            else
            {
                var request = new RejectTimeEntryRequest { TimeEntryIds = entryIds };
                await TimeEntryService.RejectTimeEntriesAsync(request);
            }

            await LoadData();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error processing approval: {ex.Message}");
        }
    }

    private void ViewDetails(TimeEntryDto entry)
    {
        // TODO: 상세보기 모달 구현
        Console.WriteLine($"View details for entry: {entry.Id}");
    }

    // 헬퍼 메서드들
    private string GetEmployeeInitials(string? name)
    {
        if (string.IsNullOrEmpty(name)) return "?";
        var parts = name.Split(' ');
        return parts.Length > 1 ? $"{parts[0][0]}{parts[1][0]}" : name.Substring(0, Math.Min(2, name.Length));
    }

    private string GetEmployeeDepartment(Guid employeeId)
    {
        var employee = employees.FirstOrDefault(e => e.Id == employeeId);
        return employee?.DepartmentName ?? "미정";
    }

    private string GetProjectClient(Guid projectId)
    {
        var project = projects.FirstOrDefault(p => p.Id == projectId);
        return project?.ClientName ?? "미정";
    }

    private string GetStatusBadgeClass(TimeEntryDto entry)
    {
        return entry.Approved ? "bg-success" : "bg-warning";
    }

    private string GetStatusText(TimeEntryDto entry)
    {
        return entry.Approved ? "승인됨" : "승인대기";
    }

    private void UseLocalFallbackData()
    {
        // 로컬 폴백 데이터
        timeEntries = new List<TimeEntryDto>
        {
            new() {
                Id = Guid.NewGuid(),
                EmployeeName = "김철수",
                ProjectName = "프로젝트 A",
                Hours = 8,
                Date = DateTime.Today.AddDays(-1),
                Billable = true,
                Approved = false
            }
        };
        CalculateSummary();
    }
}

<style>
    .avatar-circle {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 0.75rem;
        font-weight: bold;
    }

    .task-description {
        max-width: 200px;
        cursor: help;
    }
</style>